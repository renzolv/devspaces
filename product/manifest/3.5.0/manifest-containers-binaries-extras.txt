containers/devspaces-code-rhel8-container:3.5.0/ubi8:8.7-1054.1675788412 as ubi-builder
containers/devspaces-code-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874
FROM ubi8:8.7-1054.1675788412 as ubi-builder
RUN yum install --installroot /mnt/rootfs tar gzip brotli libstdc++ coreutils glibc-minimal-langpack --releasever 8 --setopt install_weak_deps=false --nodocs -y && yum --installroot /mnt/rootfs clean all
RUN rm -rf /mnt/rootfs/var/cache/* /mnt/rootfs/var/log/dnf* /mnt/rootfs/var/log/yum.*
COPY /build/scripts/entrypoint*.sh /mnt/rootfs/
COPY asset-*.tar.gz /tmp/assets/
FROM ubi8-minimal:8.7-1049.1675784874
COPY --from=ubi-builder /mnt/rootfs/ /

containers/devspaces-configbump-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874
FROM ubi8-minimal:8.7-1049.1675784874
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
RUN microdnf -y install shadow-utils golang && \
    adduser appuser && \
    CGO_ENABLED=0 GOOS=linux GOARCH=${ARCH} go build -a -ldflags '-w -s' -a -installsuffix cgo -o configbump cmd/configbump/main.go && \
    microdnf -y clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"

containers/devspaces-dashboard-rhel8-container:3.5.0/ubi8/nodejs-16:1-90 as builder
containers/devspaces-dashboard-rhel8-container:3.5.0/ubi8/nodejs-16:1-90
FROM ubi8/nodejs-16:1-90 as builder
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
COPY .yarn/releases $REMOTE_SOURCES_DIR/devspaces-images-dashboard/app/devspaces-dashboard/.yarn/releases/
RUN yarn config set nodedir /usr; yarn config set unsafe-perm true && yarn install
FROM ubi8/nodejs-16:1-90
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder ${BACKEND_LIB} /backend
COPY --from=builder ${FRONTEND_LIB} /public
COPY --from=builder ${DEVFILE_REGISTRY} /public/dashboard/devfile-registry

containers/devspaces-devfileregistry-rhel8-container:3.5.0/ubi8/python-38:1-121 as builder
containers/devspaces-devfileregistry-rhel8-container:3.5.0/rhel8/httpd-24:1-248 AS registry
FROM ubi8/python-38:1-121 as builder
COPY root-local.tgz /tmp/root-local.tgz
COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
COPY ./build/dockerfiles/rhel.install.sh /tmp
RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh
COPY ./build/scripts /build/
COPY ./devfiles /build/devfiles
COPY ./build/dockerfiles/rhel.cache_projects.sh resources.tgz /tmp/ 
FROM rhel8/httpd-24:1-248 AS registry
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY README.md .htaccess /var/www/html/
COPY --from=builder /build/devfiles /var/www/html/devfiles
COPY --from=builder /build/resources /var/www/html/resources
COPY ./images /var/www/html/images

containers/devspaces-idea-rhel8-container:3.5.0/ubi8:8.7-1090 as ubi-builder
containers/devspaces-idea-rhel8-container:3.5.0/ubi8-minimal:8.7-1085
FROM ubi8:8.7-1090 as ubi-builder
COPY --chown=0:0 asset-required-rpms.txt /tmp/asset-required-rpms.txt
RUN yum install unzip -y --nodocs && \
    yum install --installroot /mnt/rootfs \
            --releasever 8 --setopt install_weak_deps=false --nodocs -y && \
    yum --installroot /mnt/rootfs clean all
RUN rm -rf /mnt/rootfs/var/cache/* /mnt/rootfs/var/log/dnf* /mnt/rootfs/var/log/yum.*
COPY --chown=0:0 asset-ide-packaging.tar.gz .
COPY --chown=0:0 asset-projector-server-assembly.zip .
COPY --chown=0:0 asset-static-assembly.tar.gz .
COPY --chown=0:0 asset-che-plugin-assembly.zip .
COPY --chown=0:0 asset-machine-exec ide/bin/machine-exec
FROM ubi8-minimal:8.7-1085
COPY --from=ubi-builder /mnt/rootfs/ /

containers/devspaces-imagepuller-rhel8-container:3.5.0/rhel8/go-toolset:1.18.9-8 as builder
containers/devspaces-imagepuller-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874
FROM rhel8/go-toolset:1.18.9-8 as builder
COPY go.mod .
COPY go.sum .
COPY resources.tgz /tmp/resources.tgz
COPY . .
RUN adduser appuser && \
FROM ubi8-minimal:8.7-1049.1675784874
RUN microdnf -y update && microdnf clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/pki/ca-trust/extracted/pem/
COPY --from=builder /etc/pki/tls/certs/ca-bundle.crt                  /etc/pki/tls/certs/
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /kubernetes-image-puller/bin/kubernetes-image-puller /
COPY --from=builder /kubernetes-image-puller/bin/sleep /bin/sleep

containers/devspaces-machineexec-rhel8-container:3.5.0/rhel8/go-toolset:1.18.9-8 as builder
containers/devspaces-machineexec-rhel8-container:3.5.0/scratch
FROM rhel8/go-toolset:1.18.9-8 as builder
COPY . .
RUN adduser unprivilegeduser && \
    CGO_ENABLED=0 GOOS=linux go build -mod=vendor -a -ldflags '-w -s' -a -installsuffix cgo -o che-machine-exec . && \
FROM scratch
COPY --from=builder /rootfs /

containers/devspaces-operator-rhel8-container:3.5.0/rhel8/go-toolset:1.18.9-13 as builder
containers/devspaces-operator-rhel8-container:3.5.0/ubi8-minimal:8.7-1085
FROM rhel8/go-toolset:1.18.9-13 as builder
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
COPY go.mod go.mod
COPY go.sum go.sum
COPY main.go main.go
COPY vendor/ vendor/
COPY mocks/ mocks/
COPY api/ api/
COPY config/ config/
COPY controllers/ controllers/
COPY pkg/ pkg/
FROM ubi8-minimal:8.7-1085
COPY --from=builder /tmp/devworkspace-operator/templates /tmp/devworkspace-operator/templates
COPY --from=builder /tmp/header-rewrite-traefik-plugin /tmp/header-rewrite-traefik-plugin
COPY --from=builder $REMOTE_SOURCES_DIR/devspaces-images-operator/app/devspaces-operator/che-operator /manager

containers/devspaces-operator-bundle-rhel8-container:3.5.0/scratch
FROM scratch
COPY manifests /manifests/
COPY metadata /metadata/

containers/devspaces-pluginregistry-rhel8-container:3.5.0/rhel8/postgresql-13:1-109
FROM rhel8/postgresql-13:1-109
COPY root-local.tgz /tmp/root-local.tgz
COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
COPY ./build/dockerfiles/rhel.install.sh /tmp
RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh
COPY --chown=0:0 /openvsx-server.tar.gz .
COPY /build/dockerfiles/application.yaml /openvsx-server/config/
COPY --chown=0:0 /ovsx.tar.gz .
COPY /build/scripts/import_vsix.sh /usr/local/bin
COPY /build/scripts/start_services.sh /usr/local/bin/
COPY /build/dockerfiles/openvsx.conf /etc/httpd/conf.d/
COPY README.md .htaccess /var/www/html/
COPY /build/scripts/*.sh resources.tgz che-*.yaml /build/
COPY v3/plugins/ /var/www/html/v3/plugins/
COPY v3/images/*.png /var/www/html/v3/images/

containers/devspaces-server-rhel8-container:3.5.0/ubi8-minimal:8.7-1085
FROM ubi8-minimal:8.7-1085
RUN microdnf install java-11-openjdk-headless tar gzip shadow-utils findutils && \
    microdnf -y clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" && \
    adduser -G root user && mkdir -p /home/user/devspaces
COPY artifacts/assembly-main.tar.gz /tmp/assembly-main.tar.gz

containers/devspaces-theia-dev-rhel8-container:3.5.0/ubi8/nodejs-14:1-99.1675799486
FROM ubi8/nodejs-14:1-99.1675799486
RUN yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum
RUN yum install -y curl make cmake gcc gcc-c++ python2 git git-core-doc openssh less bash tar gzip rsync patch \
    && yum -y clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY asset-yarn-*.tgz /tmp/
COPY asset-eclipse-che-theia-generator.tgz ${HOME}/eclipse-che-theia-generator.tgz
    yarn ${YARN_FLAGS} global add yo generator-code vsce@^1 @theia/generator-plugin@0.0.1-1622834185 file:${HOME}/eclipse-che-theia-generator && \
RUN echo "Installed npm Packages" && npm ls -g | sort | uniq || true
RUN echo "End Of Installed npm Packages"

containers/devspaces-theia-endpoint-rhel8-container:3.5.0/registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-rhel8:3.5 as builder
containers/devspaces-theia-endpoint-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874 as runtime
FROM registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-rhel8:3.5 as builder
COPY asset-theia-endpoint-runtime-pre-assembly-nexe-cache-*.tar.gz asset-theia-endpoint-runtime-binary-yarn-*.tar.gz asset-node-src.tar.gz /tmp/
    export NODE_VERSION=$(node --version | sed -s 's/v//') && mkdir -p "/home/theia/.nexe/${NODE_VERSION}" && \
    tar zxf /tmp/asset-node-src.tar.gz --strip-components=1 -C "/home/theia/.nexe/${NODE_VERSION}" && \
RUN yum install -y git make cmake gcc gcc-c++ python2 automake autoconf which glibc-devel && \
    yum -y clean all && rm -rf /var/cache/yum && ln -s /usr/bin/python2 /usr/bin/python
COPY asset-theia-endpoint-runtime-pre-assembly-nexe-*.tar.gz /tmp/
FROM ubi8-minimal:8.7-1049.1675784874 as runtime
RUN microdnf -y install yum python38 python38-pyyaml jq && python3 --version && \
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY *.whl /tmp
RUN pip3 --version && pip3 install /tmp/*.whl && yq --version && rm -fr /tmp/*.whl 
COPY --from=builder /home/theia/plugin-remote-endpoint /plugin-remote-endpoint

containers/devspaces-theia-rhel8-container:3.5.0/registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-dev-rhel8:3.5 as builder
containers/devspaces-theia-rhel8-container:3.5.0/ubi8/nodejs-14:1-99.1675799486 as build-result
containers/devspaces-theia-rhel8-container:3.5.0/ubi8/nodejs-14:1-99.1675799486 as runtime
FROM registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-dev-rhel8:3.5 as builder
ARG THEIA_VERSION=master
COPY asset-theia-source-code.tar.gz /tmp/asset-theia-source-code.tar.gz
COPY asset-branding.tar.gz /tmp/asset-branding.tar.gz
ADD src/patches ${HOME}/patches
RUN if [ -d "${HOME}/patches/${THEIA_VERSION}" ]; then \
    echo "Applying patches for Theia version ${THEIA_VERSION}"; \
    for file in $(find "${HOME}/patches/${THEIA_VERSION}" -name '*.patch'); do \
COPY asset-che-theia.tar.gz /tmp/asset-che-theia.tar.gz
    echo "" > ${HOME}/theia-source-code/dev-packages/electron/scripts/post-install.js && \
RUN yum install -y libsecret libsecret-devel make cmake gcc gcc-c++
COPY asset-yarn-*.tar.gz asset-post-download-dependencies-*.tar.gz /tmp/
COPY asset-yarn-*.lock /tmp/
COPY asset-node-headers.tar.gz ${HOME}/asset-node-headers.tar.gz
COPY asset-untagged-theia_yeoman_plugin.theia /home/theia-dev/theia-source-code/production/plugins/theia_yeoman_plugin.theia
FROM ubi8/nodejs-14:1-99.1675799486 as build-result
COPY --from=builder /home/theia-dev/theia-source-code/production /che-theia-build
FROM ubi8/nodejs-14:1-99.1675799486 as runtime
RUN yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder /tmp/branding ${HOME}/branding
COPY --from=build-result /default-theia-plugins /default-theia-plugins
COPY asset-sshpass-sources.tar.gz /tmp/
    && yum install -y $LIBSECRET sudo git git-lfs bzip2 which bash curl openssh less \
    cd /tmp/sshpass-*/ && ./configure && make install && cd .. && rm -rf *sshpass-* && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY asset-yarn-runtime-image-*.tar.gz /tmp/
    adduser -r -u 1002 -G root -d ${HOME} -m -s /bin/sh theia \
    && yarn global add ${YARN_FLAGS} yo @theia/generator-plugin@0.0.1-1622834185 generator-code typescript@3.5.3 \
COPY --chown=theia:root --from=build-result /che-theia-build /home/theia

containers/devspaces-traefik-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874 as builder
containers/devspaces-traefik-rhel8-container:3.5.0/ubi8-minimal:8.7-1049.1675784874 
FROM ubi8-minimal:8.7-1049.1675784874 as builder
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
ENV NODEJS_VERSION="12:8020020200326104117/development"
RUN microdnf -y install dnf && \
    dnf -y -q install python2 golang make gcc-c++ openssl-devel && \
    dnf -y -q module install nodejs:$NODEJS_VERSION && \
    yarn install && \
FROM ubi8-minimal:8.7-1049.1675784874 
COPY --from=builder $REMOTE_SOURCES_DIR/devspaces-images-traefik/app/devspaces-traefik/script/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder $REMOTE_SOURCES_DIR/devspaces-images-traefik/app/devspaces-traefik/traefik /traefik
    microdnf -y clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" 
    TRAEFIK_VERSION="v2.8.1" \
    GOLANG_VERSION="1.16.2" \

containers/devspaces-udi-rhel8-container:3.5.0/rhel8/go-toolset:1.18.9-13 as go-builder
containers/devspaces-udi-rhel8-container:3.5.0/ubi8-minimal:8.7-1085
FROM rhel8/go-toolset:1.18.9-13 as go-builder
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
    dnf -y -q install golang make gzip which openshift-clients && \
FROM ubi8-minimal:8.7-1085
    NODEJS_VERSION="16" \
    PYTHON_VERSION="3.9" \
    PHP_VERSION="7.4" \
    XDEBUG_VERSION="3.1.6" \
ADD etc/storage.conf $HOME/.config/containers/storage.conf
COPY $REMOTE_SOURCES $REMOTE_SOURCES_DIR
COPY etc/docker.sh /usr/local/bin/docker
COPY artifacts/lombok.jar /lombok.jar
    microdnf install -y dnf && \
    dnf -y -q module install container-tools:rhel8 maven:3.6 nodejs:$NODEJS_VERSION python39:${PYTHON_VERSION} php:$PHP_VERSION && \
    dnf -y -q install --setopt=tsflags=nodocs \
        php php-cli php-fpm php-opcache php-devel php-pear php-gd php-intl php-mysqli php-zlib php-curl \
        bash tar gzip unzip bzip2 which shadow-utils findutils wget curl sudo git git-lfs procps-ng tree \
    dnf -y -q reinstall shadow-utils && \
    dnf -y -q clean all && rm -rf /var/cache/yum && \
    sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a "/var/lib/shared",' /etc/containers/storage.conf && \
    python${PYTHON_VERSION} -m pip install --user --no-cache-dir --upgrade pip setuptools pytest flake8 virtualenv yq && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pip \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pip && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pip \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pip${PYTHON_VERSION} && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m flake8 \$*" | sed -r -e "s@#@#\!@" > /usr/bin/flake8 && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m flake8 \$*" | sed -r -e "s@#@#\!@" > /usr/bin/flake8${PYTHON_VERSION} && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pytest \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pytest && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pytest \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pytest${PYTHON_VERSION} && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m yq \$*" | sed -r -e "s@#@#\!@" > /usr/bin/yq && \
    SL=/usr/local/bin/python; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/python${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    SL=/usr/local/bin/pip; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pip${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    SL=/usr/local/bin/flake8; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/flake8${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    SL=/usr/local/bin/pytest; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pytest${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    mkdir -p /home/user; cd /home/user; /usr/bin/python${PYTHON_VERSION} -m venv .venv && \
        dnf -y -q --setopt=tsflags=nodocs install dotnet dotnet-sdk-6.0 dotnet-sdk-7.0; \
        dnf -y -q --setopt=tsflags=nodocs install dotnet dotnet-sdk-6.0 dotnet-sdk-7.0; \
        dnf -y -q --setopt=tsflags=nodocs install dotnet dotnet-sdk-7.0; \
    ./configure --enable-xdebug; make; make install && \
COPY --from=go-builder $REMOTE_SOURCES_DIR/gopls/app/gopls/gopls $HOME/go/bin/gopls
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" && \
    echo "python basic install:"; python -V; \
    echo "python venv install:"; source ${HOME}/.venv/bin/activate && python -V; \

