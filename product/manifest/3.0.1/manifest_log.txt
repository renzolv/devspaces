1a. Check out 3rd party language server dependencies builder repo (will collect variables later)

1b. Define list of upstream containers & RPMs pulled into them from https://pkgs.devel.redhat.com/cgit/?q=devspaces 

== devspaces-configbump (devspaces-3.0-rhel-8) ==
FROM ubi8-minimal:8.6-751
COPY asset-*.tar.gz /tmp/assets/
RUN microdnf -y install tar gzip shadow-utils && \
    adduser appuser && \
    microdnf -y clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"

== devspaces-operator (devspaces-3.0-rhel-8) ==
FROM rhel8/go-toolset:1.17.12-3 as builder
ARG DEV_WORKSPACE_CONTROLLER_VERSION="v0.12.0"
COPY asset-* /tmp/
COPY go.mod go.mod
COPY go.sum go.sum
COPY main.go main.go
COPY vendor/ vendor/
COPY mocks/ mocks/
COPY api/ api/
COPY config/ config/
COPY controllers/ controllers/
COPY pkg/ pkg/
FROM ubi8-minimal:8.6-902
RUN microdnf install -y httpd-tools && microdnf -y update && microdnf -y clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" && \
COPY --from=builder /tmp/devworkspace-operator/templates /tmp/devworkspace-operator/templates
COPY --from=builder /tmp/header-rewrite-traefik-plugin /tmp/header-rewrite-traefik-plugin
COPY --from=builder /che-operator/che-operator /manager

== devspaces-operator-bundle (devspaces-3.0-rhel-8) ==
FROM scratch
COPY manifests /manifests/
COPY metadata /metadata/

== devspaces-dashboard (devspaces-3.0-rhel-8) ==
FROM ubi8/nodejs-16:1-18 as builder
RUN yum -y -q update --exclude=unbound-libs && \
    yum -y -q clean all && rm -rf /var/cache/yum
COPY package.json /dashboard/
COPY yarn.lock /dashboard/
COPY .yarn/releases /dashboard/.yarn/releases/
COPY lerna.json /dashboard/
COPY tsconfig.json /dashboard/
COPY ${COMMON}/package.json /dashboard/${COMMON}/
COPY ${FRONTEND}/package.json /dashboard/${FRONTEND}/
COPY ${BACKEND}/package.json /dashboard/${BACKEND}/
COPY asset-node-modules-cache.tgz /tmp/
COPY packages/ /dashboard/packages
FROM ubi8/nodejs-16:1-18
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder ${BACKEND_LIB} /backend
COPY --from=builder ${FRONTEND_LIB} /public

== devspaces-devfileregistry (devspaces-3.0-rhel-8) ==
FROM ubi8/python-38:1-96.1652298786 as builder
COPY root-local.tgz /tmp/root-local.tgz
COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
COPY ./build/dockerfiles/rhel.install.sh /tmp
RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh
COPY ./build/scripts ./arbitrary-users-patch/base_images /build/
COPY ./devfiles /build/devfiles
COPY ./build/dockerfiles/rhel.cache_projects.sh resources.tgz /tmp/ 
FROM rhel8/httpd-24:1-193.1652296462 AS registry
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY README.md .htaccess /var/www/html/
COPY --from=builder /build/devfiles /var/www/html/devfiles
COPY --from=builder /build/resources /var/www/html/resources
COPY ./images /var/www/html/images

== devspaces-idea (devspaces-3.0-rhel-8) ==
FROM ubi8:8.6-754 as ubi-builder
COPY --chown=0:0 asset-required-rpms.txt /tmp/asset-required-rpms.txt
RUN yum install unzip -y --nodocs && \
    yum install --installroot /mnt/rootfs \
            --releasever 8 --setopt install_weak_deps=false --nodocs -y && \
    yum --installroot /mnt/rootfs clean all
RUN rm -rf /mnt/rootfs/var/cache/* /mnt/rootfs/var/log/dnf* /mnt/rootfs/var/log/yum.*
COPY --chown=0:0 asset-ide-packaging.tar.gz .
COPY --chown=0:0 asset-projector-server-assembly.zip .
COPY --chown=0:0 asset-static-assembly.tar.gz .
COPY --chown=0:0 asset-che-plugin-assembly.zip .
FROM ubi8-minimal:8.6-751
COPY --from=ubi-builder /mnt/rootfs/ /

== devspaces-imagepuller (devspaces-3.0-rhel-8) ==
FROM rhel8/go-toolset:1.17.7-13 as builder
COPY go.mod .
COPY go.sum .
COPY resources.tgz /tmp/resources.tgz
COPY . .
RUN adduser appuser && \
FROM ubi8-minimal:8.6-751
RUN microdnf -y update && microdnf clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/pki/ca-trust/extracted/pem/
COPY --from=builder /etc/pki/tls/certs/ca-bundle.crt                  /etc/pki/tls/certs/
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /kubernetes-image-puller/bin/kubernetes-image-puller /
COPY --from=builder /kubernetes-image-puller/bin/sleep /bin/sleep

== devspaces-machineexec (devspaces-3.0-rhel-8) ==
FROM rhel8/go-toolset:1.17.7-13 as builder
COPY . .
RUN adduser unprivilegeduser && \
    CGO_ENABLED=0 GOOS=linux go build -mod=vendor -a -ldflags '-w -s' -a -installsuffix cgo -o che-machine-exec . && \
FROM scratch
COPY --from=builder /rootfs /

== devspaces-pluginregistry (devspaces-3.0-rhel-8) ==
FROM ubi8/python-38:1-96 as builder
COPY root-local.tgz /tmp/root-local.tgz
COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
COPY ./build/dockerfiles/rhel.install.sh /tmp
RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh
COPY ./build/scripts/*.sh /build/
COPY che-*.yaml /build/
COPY resources.tgz /build/
COPY ./v3/plugins/ /build/v3/plugins/
COPY ./v3/images/*.png /build/v3/images/
FROM rhel8/httpd-24:1-193 AS registry
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY README.md .htaccess /var/www/html/
COPY --from=builder /build/output/v3 /var/www/html/v3
COPY --from=builder /build/v3/plugins/ /var/www/html/v3/plugins/
COPY --from=builder /build/v3/images/ /var/www/html/v3/images/

== devspaces-server (devspaces-3.0-rhel-8) ==
FROM ubi8-minimal:8.6-751
RUN microdnf install java-11-openjdk-headless tar gzip shadow-utils findutils && \
    microdnf -y clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" && \
    adduser -G root user && mkdir -p /home/user/devspaces
COPY asset-server.tgz /tmp/asset-server.tgz

== devspaces-theia-dev (devspaces-3.0-rhel-8) ==
FROM ubi8/nodejs-14:1-75
RUN yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum
RUN yum install -y curl make cmake gcc gcc-c++ python2 git git-core-doc openssh less bash tar gzip rsync patch \
    && yum -y clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY asset-yarn-*.tgz /tmp/
COPY asset-eclipse-che-theia-generator.tgz ${HOME}/eclipse-che-theia-generator.tgz
    yarn ${YARN_FLAGS} global add yo generator-code vsce@^1 @theia/generator-plugin@0.0.1-1622834185 file:${HOME}/eclipse-che-theia-generator && \
RUN echo "Installed npm Packages" && npm ls -g | sort | uniq || true
RUN echo "End Of Installed npm Packages"

== devspaces-theia-endpoint (devspaces-3.0-rhel-8) ==
FROM registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-rhel8:3.0 as builder
COPY asset-theia-endpoint-runtime-pre-assembly-nexe-cache-*.tar.gz asset-theia-endpoint-runtime-binary-yarn-*.tar.gz asset-node-src.tar.gz /tmp/
    export NODE_VERSION=$(node --version | sed -s 's/v//') && mkdir -p "/home/theia/.nexe/${NODE_VERSION}" && \
    tar zxf /tmp/asset-node-src.tar.gz --strip-components=1 -C "/home/theia/.nexe/${NODE_VERSION}" && \
RUN yum install -y git make cmake gcc gcc-c++ python2 automake autoconf which glibc-devel && \
    yum -y clean all && rm -rf /var/cache/yum && ln -s /usr/bin/python2 /usr/bin/python
COPY asset-theia-endpoint-runtime-pre-assembly-nexe-*.tar.gz /tmp/
FROM ubi8-minimal:8.6-751 as runtime
RUN microdnf -y install yum python38 python38-pyyaml jq && python3 --version && \
    yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY *.whl /tmp
RUN pip3 --version && pip3 install /tmp/*.whl && yq --version && rm -fr /tmp/*.whl 
COPY --from=builder /home/theia/plugin-remote-endpoint /plugin-remote-endpoint

== devspaces-theia (devspaces-3.0-rhel-8) ==
FROM registry-proxy.engineering.redhat.com/rh-osbs/devspaces-theia-dev-rhel8:3.0 as builder
ARG THEIA_VERSION=master
COPY asset-theia-source-code.tar.gz /tmp/asset-theia-source-code.tar.gz
COPY asset-branding.tar.gz /tmp/asset-branding.tar.gz
ADD src/patches ${HOME}/patches
RUN if [ -d "${HOME}/patches/${THEIA_VERSION}" ]; then \
    echo "Applying patches for Theia version ${THEIA_VERSION}"; \
    for file in $(find "${HOME}/patches/${THEIA_VERSION}" -name '*.patch'); do \
COPY asset-che-theia.tar.gz /tmp/asset-che-theia.tar.gz
    echo "" > ${HOME}/theia-source-code/dev-packages/electron/scripts/post-install.js && \
RUN yum install -y libsecret libsecret-devel make cmake gcc gcc-c++
COPY asset-yarn-*.tar.gz asset-post-download-dependencies-*.tar.gz /tmp/
COPY asset-yarn-*.lock /tmp/
COPY asset-node-headers.tar.gz ${HOME}/asset-node-headers.tar.gz
COPY asset-untagged-theia_yeoman_plugin.theia /home/theia-dev/theia-source-code/production/plugins/theia_yeoman_plugin.theia
FROM ubi8/nodejs-14:1-75 as build-result
COPY --from=builder /home/theia-dev/theia-source-code/production /che-theia-build
FROM ubi8/nodejs-14:1-75 as runtime
RUN yum -y -q update && \
    yum -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY --from=builder /tmp/branding ${HOME}/branding
COPY --from=build-result /default-theia-plugins /default-theia-plugins
COPY asset-sshpass-sources.tar.gz /tmp/
    && yum install -y $LIBSECRET sudo git git-lfs bzip2 which bash curl openssh less \
    cd /tmp/sshpass-*/ && ./configure && make install && cd .. && rm -rf *sshpass-* && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages"
COPY asset-yarn-runtime-image-*.tar.gz /tmp/
    adduser -r -u 1002 -G root -d ${HOME} -m -s /bin/sh theia \
    && yarn global add ${YARN_FLAGS} yo @theia/generator-plugin@0.0.1-1622834185 generator-code typescript@3.5.3 \
COPY --chown=theia:root --from=build-result /che-theia-build /home/theia

== devspaces-traefik (devspaces-3.0-rhel-8) ==
FROM ubi8-minimal:8.6-751 
COPY asset-*.tar.gz /tmp/assets/ 
COPY script/ca-certificates.crt /etc/ssl/certs/
RUN microdnf -y install tar gzip && \ 
    microdnf -y clean all && rm -rf /var/cache/yum && echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" 
    TRAEFIK_VERSION="v2.5.0" \
    GOLANG_VERSION="1.16.2" \

== devspaces-udi (devspaces-3.0-rhel-8) ==
FROM ubi8-minimal:8.6-751
    KAMEL_VERSION="" \
    ODO_VERSION="v2.5.0" \
    NODEJS_VERSION="16" \
    GRADLE_VERSION="6.1" \
    MAVEN_VERSION="3.6.3" \
    LOMBOK_VERSION="1.18.22" \
    PYTHON_VERSION="3.8" \
    PHP_VERSION="7.3" \
    DOTNET_RPM_VERSION=3.1 \
ADD etc/storage.conf $HOME/.config/containers/storage.conf
COPY . /tmp/assets/
COPY etc/docker.sh /usr/local/bin/docker
COPY lombok-${LOMBOK_VERSION}.jar /lombok.jar
COPY gradle-${GRADLE_VERSION}-bin.zip apache-maven-${MAVEN_VERSION}-bin.tar.gz /tmp/
    microdnf install -y dnf bash tar gzip unzip bzip2 which shadow-utils findutils wget curl sudo git procps-ng podman skopeo \
    dnf -y -q install java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless \
    dnf -y -q module enable nodejs:$NODEJS_VERSION && \
    INSTALL_PKGS="nodejs npm nodejs-nodemon nss_wrapper" && ln -s /usr/lib/node_modules/nodemon/bin/nodemon.js /usr/bin/nodemon && \
    dnf -y -q remove $INSTALL_PKGS && \
    dnf -y -q install --setopt=tsflags=nodocs $INSTALL_PKGS && rpm -V $INSTALL_PKGS && \
    mkdir -p /opt; unzip -d /opt /tmp/gradle-${GRADLE_VERSION}-bin.zip && \
    mv /opt/gradle-${GRADLE_VERSION} /opt/gradle && rm -f /tmp/gradle-${GRADLE_VERSION}-bin.zip && \
    tar xzf /tmp/assets/apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /opt && \
    mv /opt/apache-maven-${MAVEN_VERSION} /opt/apache-maven && \
    rm -f /tmp/assets/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    dnf -y -q module enable python38:${PYTHON_VERSION} && \
    dnf -y -q install python38 python38-devel python38-setuptools python38-pip && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pylint \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pylint && \
    echo -e "#/usr/bin/bash\n/usr/bin/python${PYTHON_VERSION} -m pylint \$*" | sed -r -e "s@#@#\!@" > /usr/bin/pylint${PYTHON_VERSION} && \
    SL=/usr/local/bin/python; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/python${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    SL=/usr/local/bin/pip; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pip${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    SL=/usr/local/bin/pylint; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pylint${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \
    dnf -y -q install llvm-toolset clang clang-libs clang-tools-extra git-clang-format gdb make cmake gcc gcc-c++ && \
        dnf -y -q --setopt=tsflags=nodocs install dotnet dotnet-host dotnet-hostfxr-${DOTNET_RPM_VERSION} dotnet-runtime-${DOTNET_RPM_VERSION} dotnet-sdk-${DOTNET_RPM_VERSION}; \
    dnf -y -q install golang glibc-devel zlib-devel libstdc++ libstdc++-devel && \
    dnf -y -q module enable php:$PHP_VERSION && \
    dnf -y -q install php php-fpm php-opcache php-devel php-pear php-gd php-mysqli php-zlib php-curl ca-certificates && \
    dnf -y -q clean all && rm -rf /var/cache/yum && \
    echo "Installed Packages" && rpm -qa | sort -V && echo "End Of Installed Packages" && \
    echo "python basic install:"; python -V; \
    echo "python venv install:"; python${PYTHON_VERSION} -m venv .venv && . .venv/bin/activate; python -V; \

1c. Other than the above, all artifacts used in Red Hat OpenShift Dev Spaces (formerly 
    Red Hat CodeReady Workspaces) Workspaces are now built in RH Central CI Jenkins:
https://main-jenkins-csb-crwqe.apps.ocp-c1.prod.psi.redhat.com/

See also latest build architecture diagram & development documentation:
https://docs.google.com/presentation/d/1R9tr67pDMk3UVUbvN7vBJbJCYGlUsO2ZPcXbdaoOvTs/edit#slide=id.g4ac34a3cdd_0_0
https://github.com/redhat-developer/devtools-productization/tree/main/codeready-workspaces

 == golang ==

2a. Install golang go deps: go-language-server@
 * GOLANG_IMAGE = registry.access.redhat.com/ubi8/go-toolset:1.15.14-3
 * GOLANG_LINT_VERSION = v1.22.2
 * GOLANG_LS_OLD_DEPS = console-stamp@0.2.9 strip-ansi@5.2.0 has-ansi@4.0.0 ansi-regex@4.1.0 chalk@2.4.2 escape-string-regexp@2.0.0 ansi-styles@4.1.0 supports-color@7.0.0
 * GOLANG_LS_VERSION = 0.1.7

  go get -v github.com/stamblerre/gocode
  go get -v github.com/uudashr/gopkgs/cmd/gopkgs
  go get -v github.com/ramya-rao-a/go-outline
  go get -v github.com/acroca/go-symbols
  go get -v golang.org/x/tools/cmd/guru
  go get -v golang.org/x/tools/cmd/gorename
  go get -v github.com/fatih/gomodifytags
  go get -v github.com/haya14busa/goplay/cmd/goplay
  go get -v github.com/josharian/impl
  go get -v golang.org/x/tools/cmd/gotype
  go get -v github.com/rogpeppe/godef
  go get -v golang.org/x/tools/cmd/godoc
  go get -v github.com/zmb3/gogetdoc
  go get -v golang.org/x/tools/cmd/goimports
  go get -v sourcegraph.com/sqs/goreturns
  go get -v golang.org/x/lint/golint
  go get -v github.com/cweill/gotests/...
  go get -v honnef.co/go/tools/...
  go get -v github.com/sourcegraph/go-langserver
  go get -v github.com/go-delve/delve/cmd/dlv
  go get -v github.com/davidrjenni/reftools/cmd/fillstruct
  go get -v golang.org/x/tools/gopls
  go build -o /go/bin/gocode-gomod github.com/stamblerre/gocode
